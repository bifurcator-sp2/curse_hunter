Class DecorController : DistanceActivated
{
	float radius;
	int density;
	int iterationNumber;
	int thinner;
	vector3 Gpos;
	float distance;
	string SpawnClass;
	string DistCvar;

	DEFAULT
	{
		+DONTTHRUST;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		radius = Args[0]?Args[0]:256;
		density = Args[1]?Args[1]:10;

		double SQ = (3.14*radius*radius)/(256*256)*density;
		iterationNumber = (SQ<=1)?1:SQ;
		thinner = (SQ<=1)?(1/SQ):0;
		DistCvar = "z_natue_renderdistance_grass";
		SpawnClass = "z_randomStone";

	}

	Override void Enable(){
		//a_log("enabled");
		int i;
		vector3 mypos;
		if(!Activated){
			if(Cvar.GetCVar("z_natue_draw_extra_decor", players[consoleplayer]).GetInt()){
				Activated = true;
				for (i = 0; i < iterationNumber; i++)
				{
					if(random(0, thinner)==0){
						A_SpawnItemEx(SpawnClass, Random(-radius, radius), Random(-radius, radius), Random(0, Args[2]), 0, 0, 0, 0, SXF_SETMASTER );
					}
				}

			}
		} else {
			if(Cvar.GetCVar("z_natue_draw_extra_decor", players[consoleplayer]).GetInt()){
				int GrassRadius_VIS = Cvar.GetCVar(DistCvar, players[consoleplayer]).GetInt();
				int GrassRadius_CACHE = GrassRadius_VIS+Cvar.GetCVar("z_natue_renderdistance_ring", players[consoleplayer]).GetInt();

				int fullDist = self.distance3D(players[consoleplayer].mo);
				vector3 PlayerPos = players[consoleplayer].mo.pos;

				if(fullDist>GrassRadius_VIS-radius){

					for (i = 0; i < iterationNumber; i++)
					{

						if(random(0, thinner)==0){
							int r1 = random(0, radius);
							int angle = random(0, 359);
							int x = self.pos.x+cos(angle)*r1;
							int y = self.pos.y+sin(angle)*r1;
							int Dist = Sqrt( (x-PlayerPos.x)*(x-PlayerPos.x) + (y-PlayerPos.y)*(y-PlayerPos.y) );
							//
							mypos.x = x;
							mypos.y = y;
							mypos.z = self.pos.z;
							if(Dist>GrassRadius_VIS && Dist<GrassRadius_CACHE){
							//if(Dist<GrassRadius_VIS+1 ){
								//A_SpawnItemEx(SpawnClass, mypos.x, mypos.y, Random(mypos.z, mypos.z+Args[2]), 0, 0, 0, 0, SXF_SETMASTER|SXF_ABSOLUTEPOSITION );

								actor item = spawn(SpawnClass, mypos);
								item.Master = self;
							}
							//A_SpawnItemEx("z_randomStone", Random(-radius, radius), Random(-radius, radius), Random(0, Args[2]) );
						}
					}


				}
			}

		}
	}

	override int getActivationDistance(){
		return Cvar.GetCVar(DistCvar, players[consoleplayer]).GetInt();
	}

	Override void Disable(){
		//override autodisabling
	}
	States
	{
		SetSprite://for DistanceSpawned
		TNT1 A 1 Enable();
		Spawn:
			TNT1 A 3 Enable();
			Loop;
	}
}


Class z_stone_Spawner : DecorController
{
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		SpawnClass = "z_randomStone";
	}

}
Class z_tree_Spawner : DecorController
{
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		density = Args[1]?Args[1]:3;
		DistCvar = "z_natue_renderdistance_tree";
		SpawnClass = "z_nature_tree_1";
	}

}
Class z_Stalagmite_Spawner : DecorController
{
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		density = Args[1]?Args[1]:5;
		DistCvar = "z_natue_renderdistance_big_decor";
		SpawnClass = "z_randomStalagmite";
	}

}
Class z_Stalagmite_SpawnerBIG : z_Stalagmite_Spawner
{
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		SpawnClass = "z_randomStalagmiteBIG";
	}

}


Class z_randomStone : DistanceSpawned
{

	default
	{
		/*+NOBLOOD;
		+SHOOTABLE;
		+DROPOFF;
		+GHOST;
		-NOLIFTDROP;
		+NODAMAGETHRUST;
		+NOBLOCKMAP;*/
		+NOINTERACTION;
		alpha 0.0;
		+FORCEXYBILLBOARD;
		radius  16;
		tag "$STONE";
	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		self.GiveInventory("Unhandable", 1);
		self.takeInventory("Usable", 1);
		A_SetScale(frandom(0.25, 0.5));
	}


	override int getRenderDistance(){
		return Cvar.GetCVar("z_natue_renderdistance_grass", players[consoleplayer]).GetInt();
	}

	States
	{
		SetSprite:
			TNT1 A 0 Nodelay { SetZ(floorZ);}
			TNT1 A 0 A_Jump (256, 1, 2, 3, 4, 5, 6);
			STNE A 0 A_jump(256, "Draw");
			STNE B 0 A_jump(256, "Draw");
			STNE C 0 A_jump(256, "Draw");
			STNE D 0 A_jump(256, "Draw");
			STNE E 0 A_jump(256, "Draw");
			STNE F 0 A_jump(256, "Draw");
			STNE G 0 A_jump(256, "Draw");
		Spawn:
			TNT1 A 1 {/*justSpawned = 0;*/}
			 Loop;
		Draw:
			"####" "#" 1 a_fadeIn(0.1, FTF_CLAMP);
			loop;

	}

}



Class z_randomStalagmite : DistanceSpawned
{

	default
	{
		+NOBLOOD;
		+SHOOTABLE;
		//+SPAWNCEILING;
		+DONTSPLASH;
		alpha 0.0;
		+FORCEYBILLBOARD;
		+NOGRAVITY;
		radius  8;
		height 1;

		+DONTTHRUST;
		+NOBLOCKMAP;

	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();

		self.giveInventory("Unhandable", 1);
		self.takeInventory("Usable", 1);
		A_SetScale(frandom(0.5, 1.0));
	}

	bool CheckCeilTexture()
	{
		static const string ceilTex[] = {"NBR"};
		int fTexLenght = ceilTex.Size();

		for (int i = 0; i < fTexLenght;i++)
		{
			TextureID tx=TexMan.CheckForTexture(ceilTex[i],TexMan.Type_Flat);
			if (tx == ceilingpic)
			{
				return true;
			}
		}
		return false;
	}

	override int getRenderDistance(){
		return Cvar.GetCVar("z_natue_renderdistance_big_decor", players[consoleplayer]).GetInt();
	}

	States
	{
		SetSprite:
			TNT1 A 8 {
				//vector3 myPos = pos;
				//myPos.z = GetZAt(0,0, 0, GZF_CEILING|GZF_NOPORTALS);
				vel.z = 8000;
				//a_logint(ceilingZ);
				//setOrigin(myPos, 1);
				/*SetZ(ceilingZ);*/  /*SetZ(GetZAt(0,0, 0, GZF_CEILING|GZF_NOPORTALS));*/
				if(!CheckCeilTexture()){ self.destroy(); }
				}
			TNT1 A 0 A_Jump (256, 1, 2, 3, 4, 5, 6);
			STAL A 0 A_jump(256, "Draw");
			STAL B 0 A_jump(256, "Draw");
			STAL C 0 A_jump(256, "Draw");
			STAL D 0 A_jump(256, "Draw");
			STAL E 0 A_jump(256, "Draw");
			STAL F 0 A_jump(256, "Draw");
			STAL G 0 A_jump(256, "Draw");
		Spawn:
			TNT1 A 1;
			 Loop;
		Draw:
			"####" "#" 1 a_fadeIn(0.1, FTF_CLAMP);
			loop;

	}

}

class z_randomStalagmiteBIG : z_randomStalagmite
{
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		A_SetScale(frandom(1.0, 2.0));
	}
}

Class z_underwarter_decor_spawner : DecorController
{
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		SpawnClass = "z_underwater_decoration";
	}

}

class z_underwater_decoration : Actor
{
	default
	{
		+NOINTERACTION;
		+DONTSPLASH;
	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		SetZ(floorZ);
		if(waterlevel<2){self.destroy();}
		int R = random(0, 100);
		if(R<80){
			spawn("z_laminaria", self.pos);
		} else {
			spawn("z_bubbles", self.pos);
		}
		self.destroy();
	}

}


Class z_laminaria : DistanceSpawned
{

	default
	{
		+FORCEYBILLBOARD;
		radius  4;
		height 32;
		+DONTTHRUST;
		+NOBLOCKMAP;
	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();

		self.giveInventory("Unhandable", 1);
		self.takeInventory("Usable", 1);
		A_SetScale(frandom(0.3, 1.0));
		if(waterlevel<2){self.destroy();}
	}


	override int getRenderDistance(){
		return Cvar.GetCVar("z_natue_renderdistance_grass", players[consoleplayer]).GetInt();
	}

	States
	{
		SetSprite:
			TNT1 A 0 Nodelay { SetZ(floorZ);}
			Goto Draw;
		Spawn:
			TNT1 A 1;
			 Loop;
		Draw:
			LAMI ABCDCB random(3, 7);
			loop;

	}

}
Class z_bubbles : DistanceSpawned
{

	default
	{
		+FORCEYBILLBOARD;
		radius  4;
		height 32;
		+DONTTHRUST;
		+NOBLOCKMAP;
		alpha 0.5;
		renderstyle "translucent";
	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();

		self.giveInventory("Unhandable", 1);
		self.takeInventory("Usable", 1);
		A_SetScale(frandom(0.3, 1.0));
		if(waterlevel<2){self.destroy();}
	}


	override int getRenderDistance(){
		return Cvar.GetCVar("z_natue_renderdistance_grass", players[consoleplayer]).GetInt();
	}

	States
	{
		SetSprite:
			TNT1 A 0 Nodelay { SetZ(floorZ);}
			Goto Draw;
		Spawn:
			TNT1 A 1;
			 Loop;
		Draw:
			BBL1 ABCD 3;
			loop;

	}

}

class z_kickup : SwitchableDecoration
{
	int radius;
	default
	{
	  +NOINTERACTION;
	  +NOGRAVITY;
	}

	Override void PostBeginPlay(){
		Super.PostBeginPlay();
		radius = Args[0]?Args[0]:128;

	}

	virtual void DoIt(){
		ThinkerIterator it = ThinkerIterator.Create("DistanceActivated");
		DistanceActivated this;
		while(this = DistanceActivated(it.Next()))
		{
			if(self.distance3d(this)>radius){ continue;}
			this.Target = self;
			this.a_faceTarget();
			this.a_recoil(1);
			//this.vel.z = 16;
			//this.setZ(this.pos.z-1);
		}
	}



	states
	{
		Spawn:
			TNT1 A 0;
			Goto Inactive;
		Inactive:
			TNT1 A -1;
			Loop;
		Active:
			TNT1 A 0 DoIt();
			Goto Inactive;
		StopIt:
			TNT1 A 2;
			Stop;
	}

}


Class z_randomFloorSceleton_spawner : DecorController
{
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		SpawnClass = "z_randomFloorSceleton";
	}

}
Class z_randomFloorSceleton : z_randomStone
{
	default
	{
		radius 16;
		height 16;
		Deathheight 16;
		-NOBLOOD;
		+SHOOTABLE;
		+DROPOFF;
		+DONTTHRUST;
		+THRUACTORS;
		-GHOST;
		health 30;
		BloodType "z_nature_BoneCracks";
		DamageFactor "Fire", 0.5;
		painchance "Fire", 255;
		tag "$SKELETON";
	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		A_SetScale(frandom(0.3, 0.5));
		giveInventory("Material_Bones", 1);
	}


	States
	{
		SetSprite:
			TNT1 A 0 Nodelay { SetZ(floorZ);}
			TNT1 A 0 A_Jump (256, 1, 2, 3, 4, 5);
			SCL1 A 0 A_jump(256, "Draw");
			SCL1 B 0 A_jump(256, "Draw");
			SCL1 C 0 A_jump(256, "Draw");
			SCL1 D 0 A_jump(256, "Draw");
			SCL1 E 0 A_jump(256, "Draw");
			SCL1 F 0 A_jump(256, "Draw");
		Death:
			TNT1 A 1 a_fall;
			stop;
		Death.Fire:
			"####" "#" 1 {
				takeInventory("Burner", 1);
				giveInventory("GenericFireDeath", 1);
				a_fall();
			}
			TNT1 A 5;
			Stop;
		Pain.Fire:
			"####" "#" 1 giveInventory("Burner", 1);
			Goto Draw;
	}

}


