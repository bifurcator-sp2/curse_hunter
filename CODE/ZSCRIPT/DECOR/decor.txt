class BigStoneDecor : Actor
{
	default
	{
		health 200;
		height 123;
		deathHeight 123;
		radius 27;
		MaxStepHeight 4;
		BloodType "z_nature_rockcracks";
		+DONTTHRUST;
		+FLOORCLIP;
		DamageFactor "fire", 0.0;
	}

	Override void PostBeginPlay(){
		Super.PostBeginPlay();
		giveInventory("Material_Rock", 1);
	}

	States
	{
		Spawn:
			STAT A -1;
			Stop;
		Death:
			TNT1 A 1;
			Stop;
	}
}

Class z_GargoileStatue : SwitchableDecoration
{
	actor Garg;
	default
	{
		Health 200;
		Radius 31;
		Height 56;
		Mass 800;
		Scale 0.58;
		Tag  "$GARGOYLE_STATUE_NAME";
		DamageFactor "fire", 0.0;
		BloodType "z_nature_rockcracks";
	}
	Override void PostBeginPlay(){
		Super.PostBeginPlay();
		giveInventory("Material_Rock", 1);
	}
	States
	{
		Spawn:
			GARS D 1;
			Goto Inactive;
		Inactive:
			GARS D -1;
			stop;
		Active:
			GARS D 5 {
				bNOCLIP = 1;
				Garg = spawn("z_sleeping_gargoyle", pos);
			}
			GARS D 1 {
				if(Garg){ Garg.setStatelabel("Wake"); }
				self.Destroy();
			}
		Death:
			TNT1 A 1;
			Stop;
	}
}


Class z_WhiteDeath : BigStoneDecor
{
	default
	{
		health 200;
		height 123;
		deathHeight 123;
		radius 27;
	}
	States
	{
		Spawn:
			STAT A -1;
			Stop;
	}
}

Class z_BloodStone : BigStoneDecor
{
	default
	{
		health 1000;
		height 24;
		deathHeight 24;
		radius 16;
		scale 0.5;
		Tag "$BIGSTONE";
	}
	States
	{
		Spawn:
			TNT1 A 0 Nodelay { SetZ(floorZ);}
			TNT1 A 0 A_Jump (256, 1, 2, 3, 4);
			BSTN A 0 A_jump(256, "Draw");
			BSTN B 0 A_jump(256, "Draw");
			BSTN C 0 A_jump(256, "Draw");
			BSTN D 0 A_jump(256, "Draw");

		Draw:
			"####" "#" -1;
			Stop;
	}
}

Class z_WhiteMonk : BigStoneDecor
{
	default
	{
		height 256;
		deathHeight 256;
		radius 64;
	}
	States
	{
		Spawn:
			STAT B -1;
			Stop;
	}
}
Class z_WhiteFigure : z_WhiteDeath
{
	default
	{
		health 100;
		height 82;
		deathHeight 82;
		radius 13;
	}
	States
	{
		Spawn:
			STAT C -1;
			Stop;
	}
}

Class z_ThornBush : actor
{
	default
	{
		health 100;
		+SOLID;
		+FLOORCLIP;
		+SHOOTABLE;
		+NODAMAGETHRUST;
		+DONTOVERLAP;
		+NEVERTARGET;
		+DONTTHRUST;
		+NOBLOOD;
		+NOBLOODDECALS;
		DamageFactor "normal", 0.0;
		DamageFactor "Fire", 0.5;
		painchance "Fire", 128;
		height 128;
		radius 48;
		tag "$THORN";
	}
	States
	{
		Spawn:
			TORN A 35;
			loop;
		Pain.fire:
			TORN A 1 giveInventory("Burner", 1);
			goto Spawn;
		Death:
			TNT1 A 0 A_Fall();
			TORN ABCD 3;
			TORN D -1;
			stop;
	}
}

Class z_ceilChain : DistanceSpawned
{
	string snd;
	default
	{
		+NOBLOOD;
		+SHOOTABLE;
		+SPAWNCEILING;
		//+SOLID;
		alpha 0.0;
		+FORCEYBILLBOARD;
		+NOGRAVITY;
		radius  8;
		height 1;

		+DONTTHRUST;
		+NOBLOCKMAP;

	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		self.giveInventory("Unhandable", 1);
		self.takeInventory("Usable", 1);
		A_SetScale(frandom(0.5, 1.0));
		switch(random(1,12)){
			case 1:
				snd = "amb/chain1";
				break;
			case 2:
				snd = "amb/chain2";
				break;
			case 3:
				snd = "amb/chain3";
				break;
			case 4:
				snd = "amb/chain4";
				break;
			default:
				snd = "null";
				break;
		}
	}


	override int getRenderDistance(){
		return Cvar.GetCVar("z_natue_renderdistance_grass", players[consoleplayer]).GetInt();
	}

	States
	{
		SetSprite:
			TNT1 A 0 Nodelay { SetZ(ceilingZ);}
			TNT1 A 0 A_Jump (256, 1, 2, 3);
			CHIN A 0 A_jump(256, "Draw");
			CHIN B 0 A_jump(256, "Draw");
			CHIN C 0 A_jump(256, "Draw");

		Spawn:
			TNT1 A 1;
			 Loop;
		Draw:
			"####" "#" 1 {
					a_fadeIn(0.1, FTF_CLAMP);
					a_playSound(snd, CHAN_AUTO, 0.3, true, ATTN_NORM);
				}
			loop;

	}

}

class z_Ladder : actor
{
	default
	{
		//+SOLID;
		+WALLSPRITE;
		+NOGRAVITY;
		//+NOCLIP;
		radius  16;
		height 128;
		+DONTTHRUST;
		alpha 0.0;
	}

	Override void PostBeginPlay()
	{

		Super.PostBeginPlay();
		a_setSize(radius, height*scale.y);
		a_fadeout(1.0, FTF_CLAMP);
	}

	states
	{
		spawn:
			LADD A -1;
				stop;
	}
}

class z_FakeLadder1 : Actor
{
	default
	{

		+WALLSPRITE;
		+NOGRAVITY;
		radius  16;
		height 16;
		+DONTTHRUST;
		+NOBLOCKMAP;
		+GHOST;
		alpha 0.0;
	}


	states
	{
		spawn:
			LADD A 1;
				loop;
	}
}

Class z_randomArtifact : z_randomStone
{
	default
	{
		radius  8;
		height 16;
		+FORCEYBILLBOARD;
		TAG "$ARTIFACT";
	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		A_SetScale(frandom(0.15, 0.25));
	}
	States
	{
		SetSprite:
			TNT1 A 0 Nodelay { SetZ(floorZ);}
			TNT1 A 0 A_Jump (256, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
			ARTI A 0 A_jump(256, "Draw");
			ARTI B 0 A_jump(256, "Draw");
			ARTI C 0 A_jump(256, "Draw");
			ARTI D 0 A_jump(256, "Draw");
			ARTI E 0 A_jump(256, "Draw");
			ARTI F 0 A_jump(256, "Draw");
			ARTI G 0 A_jump(256, "Draw");
			ARTI H 0 A_jump(256, "Draw");
			ARTI I 0 A_jump(256, "Draw");
			ARTI K 0 A_jump(256, "Draw");
			ARTI L 0 A_jump(256, "Draw");
	}

}

class z_Rope : actor
{
	default
	{
		+SOLID;
		+NOGRAVITY;
		+FORCEYBILLBOARD;
		radius  2;
		height 64;
		+DONTTHRUST;
	}

	Override void PostBeginPlay()
	{

		Super.PostBeginPlay();
		a_setSize(radius, height*scale.y);
	}

	states
	{
		spawn:
			ROPE A -1;
				stop;
	}
}

Class ZombieGrave : actor
{
	default
	{
		scale 0.6;
	}
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		/*vector3 Zpos = pos;
		Zpos.x = Zpos.x+random(-64, 64);
		Zpos.y = Zpos.y+random(-64, 64);
		z_Earth_AxeZombie Zombie = z_Earth_AxeZombie(spawn("z_Earth_AxeZombie", Zpos));
		Zombie.skip = true;*/
		int n = 0;
		while(!a_spawnItemEX("z_Earth_AxeZombie", random(0, 64),  random(-24, 24), 0, 0, 0, 0, 0, 0, 32, 7010)){
			n++;
			if(n>10){ return;}
		}

	}
}

class z_WEB4 : actor
{

	default
	{
		+WALLSPRITE;
		radius 16;
		Height 1;
		+NOBLOOD;
		+NOBLOODDECALS;
		+NEVERTARGET;
		+DONTTHRUST;
		+SHOOTABLE;
		+THRUACTORS;
		-SOLID;
		+NOGRAVITY;
		RenderStyle "Translucent";
		Alpha 0.7;
	}

	States
	{
		Spawn:
			WEB2 A -1;
			Stop;
	}

}



class z_WEB5 : actor
{

	default
	{
		+FLATSPRITE;
		+NOGRAVITY;

		RenderStyle "Translucent";
		Alpha 0.7;

		radius 64;
		health 8;
		Height 8;
		+NOBLOOD;
		+NOBLOODDECALS;
		+NEVERTARGET;
		+DONTTHRUST;
		+SHOOTABLE;
		-SOLID;
		Species "Spiders";
		+ThruSpecies;
		+ISMONSTER;

		DamageFactor "Fire", 0.2;
		PainChance "Fire", 255;
	}

	States
	{
		Spawn:
			WEB3 A 10;
			Loop;
		Pain.Fire:
			WEB3 A 1 giveInventory("Burner", 1);
			Goto Spawn;
		Death:
			TNT1 A 1 destroy();
			Stop;

	}


}

class z_introGraveCover : switchableDecoration
{
	default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		+FLATSPRITE;
	}

	states
	{
		Spawn:
			IGCO A 1;
			Goto Inactive;
		Inactive:
			IGCO A 1;
			Loop;
		Active:
			IGCO A 1
			{
			//90
				if(angle>100){ angle-=0.06;}
			}
			Loop;

	}

}

Class z_Mengir : PointUsable
{
	int ItIsUsed;
	bool tutorialShowed;
	default
	{
		height 128;
		deathHeight 128;
		radius 16;
		scale 0.75;
		+FORCEYBILLBOARD;
		BloodType "z_nature_rockcracks";
		+DONTTHRUST;
		DamageFactor "fire", 0.0;
		Tag "$MENGIR";
	}

	Override void PostBeginPlay(){
		Super.PostBeginPlay();
		giveInventory("Material_Rock", 1);
		//self.giveInventory("Unhandable", 1);
	}

	override void Tick()
	{
		Super.Tick();

		if(!ItIsUsed && getCurrentDistance()<getActivationDistance()){
			a_spawnItemEx("MengirFly", random(-radius, radius), random(-radius, radius), random(height/2, height), 0, 0, 0, 0, SXF_NOCHECKPOSITION, 250 );
		}
		//a_logint(players[ConsolePlayer].mo.checkInventory("DONT_SHOW_19", 1));

		if(!tutorialShowed && getCurrentDistance() && getCurrentDistance()<128 && !players[ConsolePlayer].mo.checkInventory("DONT_SHOW_19", 1)){
			tutorialShowed = 1;
			CALLacs("Tutorial", 19, 0, 0, 0);
			players[ConsolePlayer].mo.giveInventory("info_3", 1);
		}

		if(getCurrentDistance() && getCurrentDistance()<256){
			BlockThingsIterator it = BlockThingsIterator.Create(self, 8);
			while (it.Next())
			{

				if (!(it.thing is "CHmonster")) { continue; }
				if (!it.thing.checkInventory("itemInHands", 1)) { continue; }
				if (it.thing.checkInventory("BurnDeathMark", 1)) { continue; }
				if (it.thing.checkInventory("MenhirSkipMark", 1)) { continue; }


				if(distance3D(it.thing)<32 && !it.thing.checkInventory("MengirEater", 1)){
					it.thing.giveInventory("MengirEater", 1);
					it.thing.Master = self;
				}
			}
		}
		//
	}

	override void Doit(actor Caller){
		if(!ItIsUsed && Caller && Caller.health<Caller.default.health){
			ItIsUsed = 1;
			setTag("$MENGIR_EMPTY");
			A_RadiusGive ("HeartHealth", 96, RGF_PLAYERS);
			Caller.takeInventory("poisoningController", 1);
			a_PlaySound("items/heartpickup");
		}
		if(ItIsUsed){
			A_Log("$MENGIRISEMPTY");
			players[ConsolePlayer].mo.a_PlaySound("player/UseUnactiveItem");

		} else if(Caller.health>=Caller.default.health){
			players[ConsolePlayer].mo.a_PlaySound("player/UseUnactiveItem");
			A_Log("$TOOMANYHEALTH");
		}
	}

	States
	{
		Spawn:
			TNT1 A 0 Nodelay { SetZ(floorZ);}
			TNT1 A 0 A_Jump (256, 1, 2, 3, 4, 5, 6);
			MNGR A 0 A_jump(256, "Draw");
			MNGR B 0 A_jump(256, "Draw");
			MNGR C 0 A_jump(256, "Draw");
			MNGR D 0 A_jump(256, "Draw");
			MNGR E 0 A_jump(256, "Draw");
			MNGR F 0 A_jump(256, "Draw");
			MNGR G 0 A_jump(256, "Draw");
		Draw:
			"####" "#" 1;
			Loop;
		Death:
			TNT1 A 1;
			Stop;
	}
}

class MengirEater : Undroppable {
	bool started;
	int OwnerDestroyDelay;
	string Item;
	int lifetime;

	virtual Void SpawnAmmo(){
		if(Owner){
			Owner.Target = players[consolePlayer].mo;
			Owner.a_faceTarget();
			for(int i=0; i<=random(1, 3); i++){
				Item = AmmoSpawnController.getItem();
				if(Item!=""){
					Owner.a_spawnItemEx(Item, 0, 0, height/2, frandom(1, 3), frandom(-1, 1), frandom(1, 8), 0, SXF_NOCHECKPOSITION);
				}
			}
		}
	}

	override void DoEffect(){
		if(!Owner){ return; }
		lifetime++;
		if(!started){
			started = true;
			Owner.takeInventory("itemInHands", 1);
			Owner.giveInventory("Unhandable", 1);
			z_PointController Controller = z_PointController(players[consoleplayer].mo.FindInventory("z_PointController"));
			Controller.USE = 1;
			Controller.HoldedItem = null;

			Owner.a_stop();
			Owner.bINVULNERABLE = 1;
			Owner.bDONTTHRUST = 1;
			Owner.bWINDTHRUST = 0;
			Owner.bPUSHABLE = 0;
			Owner.bNOGRAVITY = 0;
			Owner.gravity = 0.1;
			Owner.A_ChangeVelocity(0, 0, 4.0);

		}
		if(Owner.CheckInventory("UniDeathGibs", 1) ||Owner.CheckInventory("UniDeathGibsGreen", 1) ){
			if(OwnerDestroyDelay<10){
				OwnerDestroyDelay++;
			} else {

				if(!z_Mengir(Owner.Master).ItIsUsed){
					SpawnAmmo();
				} else {

				}
				Owner.Master.a_spawnItem("MenhirSound");
				Owner.destroy();
			}

		}
		if(Owner && (Owner.vel.z<0 || lifetime > 35*3)){
			z_Mengir Mengir = z_Mengir(Owner.Master);
			Mengir.ItIsUsed = 0;
			Mengir.setTag("$MENGIR");
			if(!CHmonster(Owner).MyBloodColor || CHmonster(Owner).MyBloodColor=="red"){
				Owner.GiveInventory("UniDeathGibs", 1);
			}
			if(CHmonster(Owner).MyBloodColor=="green"){
				Owner.GiveInventory("UniDeathGibsGreen", 1);
			}
			A_log("$SACRIFICEACCEPTED");
		}
		if(Owner){
			if(!CHmonster(Owner).MyBloodColor || CHmonster(Owner).MyBloodColor=="red"){
				Owner.A_SpawnItemEx("BloodTrail", random(-2, 2), random(-2, 2), random(-2, 2), frandom(2.0, 4.0), frandom(-4.0, 4.0), frandom(1.0, 8.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
			}
			if(CHmonster(Owner).MyBloodColor=="green"){
				Owner.A_SpawnItemEx("BloodTrailGreen", random(-2, 2), random(-2, 2), random(-2, 2), frandom(2.0, 4.0), frandom(-4.0, 4.0), frandom(1.0, 8.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);

			}
		}
	}
}


class MenhirSound : ExternalSound
{
	Override void PostBeginPlay(){
		Super.PostBeginPlay();
		soundName = "MENHIR";
	}
}
//


class MengirFly : Actor
{
	int counter;
	Default
	{
	  Health 1;
	  Radius 1;
	  Height 1;
	  Mass 1;
	  Speed 2;
	  scale 0.05;
	  renderstyle "Add";
	  //Monster;
	  //-ISMONSTER;
	  //-KOUNTKILL;
	  +friendly;
	  +FLOAT;
	  +NOGRAVITY;
	}
	Override void PostBeginPlay(){
		Super.PostBeginPlay();
		counter = 35*5;
	}
	States
	{
		Spawn:
			BUGL BC 1 light("BugLightSmall") { a_wander(); counter--;}
			TNT1 A 0 a_jumpIf(counter<=0, "Death");
			Loop;
		Death:
			BUGL BC 1 { a_wander(); a_fadeout(0.01);}
			Loop;
	}

}