Class z_Defiler : SwitchableDecoration
{

	string SpawnClass;
	string SpawnClass2;
	int ChildNumber;
	int ChildNum;
	int ActivationRadius;
	int MonstersRadius;
	bool Active;
	bool ActivePain;
	//ThinkerIterator childIterator;
	//ThinkerIterator fbIterator;
	int putOutFireChance;
	int putOutFireDelay;
	bool tutor8;
	bool DefendersCalled;

default
	{
		Tag "$DEFILER_NAME";
		+ISMONSTER;
		+COUNTKILL;
		+SHOOTABLE;
		+DONTTHRUST;
		+DONTBLAST;
		PainChance 200;
		PainChance "Fire", 64;
		DamageFactor "PitchFork", 3;

		Health 1000;
		BloodType "z_nature_woodcracks";
		+NOBLOODDECALS;
		radius 24;
		height 78;
		scale 0.7;
		painSound "defiler/pain";
		//painSound "defiler/dieStart";

	}


	Override void PostBeginPlay(){
		Super.PostBeginPlay();
		giveInventory("Pointable", 1);
		giveInventory("Material_Wood", 1);
		giveInventory("z_Damnation", 1);

		SpawnClass = "AxeZombie";
		SpawnClass2 = "Earth_AxeZombie";
		ChildNumber = Args[0]?Args[0]:5;
		ActivationRadius = Args[1]?Args[1]:128;
		MonstersRadius = Args[2]?Args[2]:512;
		if(MonstersRadius<=ActivationRadius){
			MonstersRadius = ActivationRadius+64;
			A_log("Incorrect defiler radiuses!");
		}
		putOutFireChance = 40;
	}

	virtual void NestAction(){
		Active = 1;
		ChildNum = 0;
		int ChildNumTotal = 0;
		ThinkerIterator ch = ThinkerIterator.Create("CHmonster");
		actor Child;
		while(Child = actor(ch.Next())){
			if(!Child.Master || Child.Master!=self){continue;}
			if(Child.Master==self && Child.health>0){
				ChildNum++;
			}
			if(Child.Master==self){
				ChildNumTotal++;
			}
		}
		while(Child = actor(ch.Next())){
			if(Child.Master==self && Child.health<=0 && ChildNumTotal>ChildNum*2){
				Child.destroy();
			}
		}
		//a_logint(ChildNum);

		if(ChildNum<ChildNumber){ //try to spawn new child
			ThinkerIterator DF = ThinkerIterator.Create("defilerSpot");
			actor spot;
			while(spot = actor(DF.Next())){
				if(distance3D(spot)>MonstersRadius){continue;}
				if(players[consoleplayer].mo.checkSight(spot)){continue;}
				//ChildNum+=spot.a_spawnItemEx(SpawnClass, 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER );
				string ClassName = SpawnClass;
				if(distance3D(spot)<256){ClassName=SpawnClass2;}
				actor Numb = spawn(ClassName, spot.pos);
				Numb.Master = self;
				ChildNum++;
				if(ChildNum>=ChildNumber){ break;}
			}

			A_AlertMonsters();
		}
		//Deactivate
		if(players[consoleplayer].mo.distance3D(self)>MonstersRadius){
			if(Active){
				setStateLabel("Inactive");
				DisableDefenders();
			}
		} else {
			if(ActivePain && !Active){
				a_playSound("defiler/raize");
				setStateLabel("Active");
				CallDefenders();
			}
		}

	}


	virtual void CallDefenders(){

		if(!DefendersCalled){
			DefendersCalled = 1;
			ThinkerIterator it = ThinkerIterator.Create("z_defilerDefender");
			z_defilerDefender this;
			while(this = z_defilerDefender(it.Next())){
				if(distance3D(this)<=MonstersRadius){
					this.master = self;
					this.target = players[consoleplayer].mo;
					if(!this.Active){
						this.setStateLabel("Active");
					}

				}
			}
		}
	}

	virtual void DisableDefenders(){
		ThinkerIterator it = ThinkerIterator.Create("z_defilerDefender");
		z_defilerDefender this;
			while(this = z_defilerDefender(it.Next())){
			if(distance3D(this)<=MonstersRadius){
				if(this.Active){
					this.setStateLabel("Inactive");
				}
			}
		}
		DefendersCalled = 0;
	}


	override void Tick(){
		super.tick();
		if(ChildNum){
			ThinkerIterator childIterator = ThinkerIterator.Create(SpawnClass);
			actor Child;
			while(Child = actor(childIterator.Next())){
				if(Child.Master==self && Child.health>0){
					/*if(health<=0){
						Child.a_damageSelf(1000);
					}*/
					if(int(self.distance3D(Child))>MonstersRadius){
						if(Child.target){
							Child.a_faceTarget();
							Child.angle+=180;
							Child.a_recoil(-16);
							if(!Active && !Child.target.CheckSight(Child, 0)){
								Child.destroy();

							} else {
								Child.target = NULL;
							}

						} else {
							Child.a_faceMaster();
							Child.a_recoil(-16);
							if(Child && Child.target && !Active && !Child.target.CheckSight(Child, 0)){
								Child.destroy();

							}
						}
					}
				}
			}
		}
		if(Active){
			ThinkerIterator fbIterator = ThinkerIterator.Create("DefilerDefenderFireBall");
			actor fb;
			while(fb = actor(fbIterator.Next())){
				if(distance3D(fb)<64){
					fb.destroy();
				}
			}
		}
		if(putOutFireChance && checkInventory("burner", 1)){
			putOutFireDelay++;
			if(putOutFireDelay==35*3){
				putOutFireDelay=0;
				if(random(0, 100)<putOutFireChance){
					takeInventory("burner", 1);
				}
			}
		}
	}


	States
	{
		Spawn:
			TNT1 A  1 {	bSHOOTABLE = 0;	bINVULNERABLE = 1; A_setSize(24, 1);}
			goto Inactive;
		Inactive:
			TNT1 A 0 A_jumpIf(!Active, 7);
			DFLR AFEDCB 5 {	bSHOOTABLE = 0;	bINVULNERABLE = 1; A_setSize(24, 1);}
			TNT1 A 35 {
				Active = 0;
				if(distance3D(players[consoleplayer].mo)<ActivationRadius){
					setStateLabel("Active");
					a_playSound("defiler/raize");
					if(!tutor8){
						CALLacs("Tutorial", 8, 0, 0, 0);
						tutor8 = 1;
					}
				}
			}
			loop;
		Active:
			TNT1 A 0 A_jumpIf(Active, 6);
			DFLR BCDEFA 5 {	bSHOOTABLE = 1;	bINVULNERABLE = 0; A_setSize(24, 78);}
			DFLR A 15 NestAction();
			loop;
		Pain:
			"####" "#" 35 {ActivePain=1; CallDefenders(); A_pain();}
			Goto Active;
		Pain.fIRE:
			"####" "#" 35 {ActivePain=1; giveInventory("Burner", 1); CallDefenders(); A_pain();}
			Goto Active;
		Death.Fire:
			"####" "#" 1 { giveInventory("GenericFireDeath", 1); CALLacs("Tutorial", 6, 0, 0, 0);}
		Death:
			TNT1 A 35;
			TNT1 A 1 { a_playSound("defiler/dieStart"); a_spawnItem("ThunderBolt");}
			TNT1 A 35;
			TNT1 A 1 {
				a_playSound("defiler/dieBlow");
				a_spawnItemEx("RepulsionBlast");
				A_Blast(strength:256, radius:256);
			}
			TNT1 A 35;
			TNT1 A 0 {
				players[consoleplayer].mo.giveInventory("info_0", 1);
				CALLacs("SetChapter", 0, 0, 0, 0);
				CALLacs("SetPage", 0, 0, 0, 0);
				Invoker.giveInventory("info_1", 1);
			}
			TNT1 A 70 A_DamageChildren(5000);
			Stop;
	}


}

class z_defilerSpot : MapSpot { }

class z_defilerDefender : SwitchableDecoration
{
	int attackRadius;
	bool Active;
	bool Rized;

	default
	{
		Tag "$DEFILER_DEFENDER_NAME";
		//+SHOOTABLE;
		+NOGRAVITY;
		+DONTTHRUST;
		PainChance 200;
		Health 150;
		BloodType "z_nature_woodcracks";
		+NOBLOODDECALS;
		radius 10;
		height 1;
		scale 0.35;
	}
	Override void PostBeginPlay(){
		Super.PostBeginPlay();

		giveInventory("Pointable", 1);
		giveInventory("Material_Wood", 1);
		attackRadius = Args[0]?Args[0]:512;

		vector3 myPos = pos;
		myPos.z = floorZ-height-8;
		setOrigin(myPos, 1);
	}

	States
	{
		Spawn:
			TNT1 A  1;
		Inactive:
			TNT1 A 0 a_jumpIf(!Rized, 6);
			DFND AFEDC 5;
			TNT1 A 0 a_jumpIf(!Active, 2);
			TNT1 A 0 {
				bINVULNERABLE = 1;
				bSHOOTABLE = 0;
				A_setSize(10, 1);
				Rized = 0;
				Active = 0;
			}
			TNT1 A 35;
			loop;
		Active:
			TNT1 A 0 a_jumpif(Rized, "See");
			"####" "#" 1;
			Goto Rize;
		Rize:
			TNT1 A 0 a_playSound("defender/raize");
			DFND CDEFA 5;
			TNT1 A 0 {
				bSHOOTABLE = 1;
				bINVULNERABLE = 0;
				A_setSize(10, 48);
				Rized = 1;
				Active = 1;
			}
			Goto See;
		See:
			DFND A 5 a_faceTarget();
			DFND B 5 {
				if(!Master || Master.health<=0){
					a_damageSelf(1000);
				}
			}
			DFND B 1 {
					A_CustomMissile("DefilerDefenderFireBall",34);
				}
			DFND A 5 a_jump(64, "Hide");
			Goto Hide;
		Hide:
			TNT1 A 0 {
				bINVULNERABLE = 1;
				bSHOOTABLE = 0;
				A_setSize(10, 1);
				takeInventory("Burner", 1);
				bALLOWPAIN = 0;
			}
			DFND AFEDC 5;
			TNT1 A 0 {
				Rized=0;
				bALLOWPAIN = 1;
			}
			Goto Hold;
		Hold:
			TNT1 A 35 a_jump(64, "Rize");
			loop;
		Pain:
			"####" "#" 15;
			Goto Hide;
		Pain.fIRE:
			"####" "#" 35 giveInventory("Burner", 1);
			Goto Active;
		Death.Fire:
			"####" "#" 1 giveInventory("GenericFireDeath", 1);
		Death:
			TNT1 A 0 giveInventory("Burner", 1);
			TNT1 A 15;
			TNT1 A 2 giveInventory("GenericFireDeath", 1);
			//
			Stop;
	}
}


class DefilerDefenderFireBall : actor
{
	default
	{
		Radius 4;
		Renderstyle "Add";
		obituary "$FIREBALL_OBITUARY";
		Height 4;
		Speed 8;
		Scale 0.5;
		Damage 15;
		PROJECTILE;
		+ROLLSPRITE;
		+NODAMAGETHRUST;
		+SEEKERMISSILE;
		+DONTSPLASH;
		damagetype "Fire";
		SeeSound "defender/fire";
		DeathSound "defender/fireBlow";
		activesound "FlareGunFlare/inAir";
	}

	states
	{
		Spawn:
			FRFL A 3 bright light("FirePlaceSmall");
			Loop;
		Death:
			FRFL BCD 3 bright light("FirePlace") a_fadeOut(0.3);
			Stop;
	}
}
