class z_SpiderBig :  CHmonster
{	actor Fiber;
	int JumpDelay;
	default
	{

		Obituary "$SPIDER_OBITUARY";
		Health 350;
		GibHealth 50;
		Radius 32;
		Height 32;
		Mass 200;
		Speed 3;
		fastspeed 5;
		PainChance 128;
		+FLOORCLIP;
		+AMBUSH;
		+SLIDESONWALLS;
		+DROPOFF;
		-NODROPOFF;
		+SHOOTABLE;
		+LOOKALLAROUND;
		-NORADIUSDMG;
		-THRUSPECIES;
		-CANUSEWALLS;
		MaxTargetRange 384;
		MeleeRange 40;
		scale 0.35;
		Gravity .6;
		radiusdamagefactor 1;
		MaxStepHeight 64;
		//translation "48:79=16:47","128:151=16:39","80:111=48:79","112:127=[96,48,32]:[32,16,0]";
		DamageFactor "PlayerJumpDownDamage", 0.5;
		DamageFactor "Blast", 2.5;

		seesound "BigSpider/See";
		painsound "BigSpider/Pain";
		deathsound "BigSpider/Death";
		activesound "BigSpider/Active";
		Species "Spiders";


	}
	override void SetNames(){
		N_NAME = StringTable.Localize("$WOLFSPIDER_NAME");
		N_DEATHNAME = StringTable.Localize("$WOLFSPIDER_DEATHNAME");
		N_BURNDEATHNAME = StringTable.Localize("$WOLFSPIDER_BURNDEATHNAME");
		N_GIBDEATHNAME = StringTable.Localize("$WOLFSPIDER_GIBDEATHNAME");
	}
	Override void tick(){
		super.tick();
		if(JumpDelay>0){
			JumpDelay--;
		}

		if(!bDORMANT && InStateSequence(CurState,ResolveState("Descend"))){
			bNOGRAVITY = 1;
			//if(vel.z<-16){vel.z = -8;}

		} else {
			if(!bDORMANT){
				bNOGRAVITY = 0;
			}
		}

	}

	override void Deactivate (Actor activator)
	{
		bDormant = true;
		bNOGRAVITY = 1;
		bDONTTHRUST = 1;
		SetStateLabel("Inactive");
	}

	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		SetNames();
		self.setTag(N_NAME);
		giveInventory("SeekPlayerController", 1);
		giveInventory("QuickKillReady", 1);
		giveInventory("SubordinatedReady", 1);
		giveInventory("MonsterJumpSoundsController", 1);

		LandingSound = "BigSpider/Landing";

		switch (random(0, 3)){
			case 1:
				A_SetTranslation("RedSpider");
				break;
			case 2:
				A_SetTranslation("BrownSpider");
				break;
			case 3:
				A_SetTranslation("BlackSpider");
				break;
			Default:
				A_SetTranslation("GraySpider");
		}

	}

	States
	{
	SetSprite:
		SPDB A 1;//for DistanceSpawned
	Spawn:
		TNT1 A 0 a_jumpif(bDORMANT, "Inactive");
		SPDB AB 10 A_Look;
		Loop;
	See:
		SPDB A 0 A_Jump(255,"Jump");
		SPDB AAAABBBBCCCC 1 A_Chase;
		SPDB DDDDEEEEFFFF 1 A_Chase;
		SPDB A 0 {
			if(waterlevel>2){
				A_DamageSelf(5);
			}
			if(Fiber){
				Fiber.destroy();
			}
		 }
		SPDB A 0 A_Jump(255,"Jump");
		Goto See;
	Inactive:
		SPDB A 10;
		LOOP;
	Active:
		"####" "#" 10 { bNOGRAVITY = 0; bDONTTHRUST = 0; }
		Goto Descend;
	Jump:
		SPDB A 0 {
				if(Target){
					FLineTraceData RemoteRay;
					Target.LineTrace(
					   Target.angle,
					   1024,
					   Target.pitch,
					   offsetz: Target.height-Target.height/3,
					   data: RemoteRay
					);

					if(CurrentDistance<256 && !JumpDelay){
						if ( !(RemoteRay.HitType == TRACE_HitActor && RemoteRay.HitActor == self) ){
							JumpDelay = 70;
							a_faceTarget();
							ThrustThingZ(0,random(20,30),0,0);
							a_recoil(-random(8,15));
							A_PlaySound("BigSpider/Jump");
						}
					}

					if(!JumpDelay && Target && CurrentDistance>=128 && CurrentDistance<=1024 ){
						if (RemoteRay.HitType == TRACE_HitActor && RemoteRay.HitActor == self){
							JumpDelay = 70;
							A_PlaySound("BigSpider/Jump");
							vel.z = random(4,10);
							float OA = angle;
							a_faceTarget();
							angle += random(0, 1)?90:-90;
							a_recoil(-random(8,15));
							angle= OA;
						}
					}
				}
			}
		Goto See+1;
	Descend:
		SPDB A 1 {
			if(!Fiber){
				Fiber = spawn("BigSpiderFiber", pos);
			} else {
				vector3 fPos = Fiber.pos;
				fPos.z = pos.z+height/2;
				Fiber.setOrigin(fPos, true);
				Fiber.scale.y = fiber.ceilingZ-Fiber.pos.z;

			}
		}
		SPDB A 1 a_jumpif(( vel.z>=0 ),"Spawn");
		Loop;
	Melee:
		SPDB G 3;
		SPDB I 6 {
			A_CustomMeleeAttack(random(2,4),"BigSpider/Bite","none","Turner",true);
			if(target && !random(0, 2)) { if(distance3D(target)<=56){target.giveInventory("poisoningController", 1);} }
			}
		SPDB I 5;
		Goto See;
	Missile:
		TNT1 A 0 a_jumpif(CurrentDistance<256, "Jump");
		SPDB G 3;
		SPDB I 6 {
				if(Target && !Target.checkInventory("WebStunController", 1)){
					if(!random(0, 2)){
						BallisticForeseengAttack("PodMucusBall", "pod/attack", 384);
					} else {
						BallisticForeseengAttack("SpiderStunnerWeb", "pod/attack", 384);
					}
				} else if(Target && Target.checkInventory("WebStunController", 1)){
					BallisticForeseengAttack("PodMucusBall", "pod/attack", 384);
				}
			}
		SPDB I 5;
		Goto See;
	Pain:
		SPDB G 3;
		SPDB G 3 A_Pain;
		Goto See;
	Pain.Fire:
		SPDB G 0 { if(LastDamage>5){giveInventory("Burner", 1);} }
		Goto Pain;
	Death:
		SPDB I 0 { A_Scream(); GiveInventory("ManyBlood", 1); }
		SPDB IJKLMNO 4;
		SPDB O 1 {
			setTag(N_DEATHNAME);
			actor BC = self.spawn("BodyBlowTarget", self.pos);BC.Master = self;//this is works
			}
		Goto Corpse;
	XDeath:
		TNT1 A 0 {
				GiveInventory("GibDeathMark", 1);
				GiveInventory("UniDeathGibs", 1);
			}
		SPDB JKLMNO 4 setTag(N_GIBDEATHNAME);
		Goto Corpse;

	Death.Fire:
		SPBB A 0 { A_PlaySound("SpiderBurn"); BDSM(); setTag(N_BURNDEATHNAME);}
		SPBB ABEGHFECABEGHFEC 5 light("FirePlaceSmall");
		SPBB IJK 5 light("FirePlaceSmall");
		SPBB LMNLMNLMNLMNLMNLMNLMNLMNLMN 15 light("FirePlaceSmall");
		SPBB O 0 A_Scream;
		Goto Corpse;
	Corpse:
		"####" "#" 1 {
			self.takeInventory("QuickKillReady", 1);
			self.takeInventory("SubordinatedReady", 1);
			A_setSize(16, 8);
			bSHOOTABLE = 1;
			bTHRUACTORS = 1;
			bGHOST = 1;
			if(!burned){
				self.giveInventory("Bleeder", 1);
			}
		}
		"####" "#" -1;
		Stop;
	Raise:
		SPDB ONMLKJI 4;
		Goto See;
	}
}

class BigSpiderFiber : actor
{
	Default{
		+NOGRAVITY;
		+NOINTERACTION;
	}

	States
	{
		Spawn:
			WWWB A 10;
			Loop;
	}
}

class SpiderStunnerWeb : actor
{
	default{
		Height 32;
		Radius 16;
		Damage 0;
		mass 200;
		//speed 8;
		+FORCEXYBILLBOARD;
		PROJECTILE;
		-NOGRAVITY;
		gravity 0.4;
		RenderStyle "Translucent";
		//Alpha 0.7;
		Scale 0.25;
	}

	states{
		spawn:
			WWWB B 3;
			Loop;
		Death:
			TNT1 A 1 a_radiusGive("WebStunController", 64, RGF_PLAYERS, 1);
			stop;
	}
}

class WebStunController : Undroppable
{
	int Counter;

	override void DoEffect()
	{
		if(Owner && !Owner.checkInventory("TotalTimeFreezer", 1)){
			if(Counter<35*10){
				Counter++;
				Owner.A_SetSpeed(Owner.default.speed/3);
			} else {
				if(Owner){
					if(Owner.speed!=Owner.default.speed){
						Owner.A_SetSpeed(Owner.default.speed);
					}
					a_fadeOut(0.05, FTF_CLAMP);
					if(Owner && alpha<=0){
						Owner.takeInventory(getClassName(), 1);
					}
				}
			}

		}
	}
}
