//===========================================================================
//
// Earth Axe Zombie
//
//===========================================================================
class z_Earth_AxeZombie : Z_AxeZombie
{
	int activationDist;
	bool StayUp;
	default
	{
		seesound "";
	}
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		activationDist = Args[0]|84;
	}
	States
	{
		WaitForStayUp:
			UGZZ J 6;
			UGZZ J 15 a_jumpif(getCurrentDistance()<activationDist, "StayUp");
			Loop;

		SetSprite://for DistanceSpawned
			TNT1 A 1 {
				A_setSize(RealRadius, 8);
				giveInventory("DontShowDamnationMarker", 1);
				takeInventory("QuickKillReady", 1);
				takeInventory("SubordinatedReady", 1);
				takeInventory("FootShotController", 1);
				}
			Goto WaitForStayUp;

		Pain:
			"####" "#" 0 takeInventory("DontShowDamnationMarker", 1);
			"####" "#" 0 a_jumpif(!StayUp, "StayUp");
			Goto Super::Pain;
		Active:
		StayUp:
			TNT1 A 0 { StayUp = 1; A_PlaySound("Zombie/Raise"); takeInventory("DontShowDamnationMarker", 1); }
			UGZZ ABCDE 4 A_setSize(RealRadius, RealHeight/2);
			UGZZ FGHI 4 { A_FaceTarget(); A_setSize(RealRadius, RealHeight); }
			Goto See;
	}
}
//===========================================================================
//
// No Legs Axe Zombie
//
//===========================================================================
class z_Nolegs_AxeZombie : Z_AxeZombie
{
	bool StayUp;
	default
	{
		seesound "";
	}

	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		noLegs = true;
	}

	States
	{
		SetSprite://for DistanceSpawned
			TNT1 A 1;
			Goto Spawn;
		Spawn:

			R066 B 1 NODELAY {
				takeInventory("HeadShotController", 1);
				takeInventory("FootShotController", 1);
				}
			R066 BCDE 16 A_Look;
			Loop;
	}
}
//===========================================================================
//
// Fire Axe Zombie
//
//===========================================================================
class z_fire_AxeZombie : Z_AxeZombie
{
	Default
	{
		Health 200;
		PainChance 0;
		DamageFactor "fire", 0.0;
		PainChance "Fire", 0;
		BloodType "GrayBlood";
		BloodColor "32 32 32";
		Translation "0:255=%[0,0,0]:[1,1,1]";
	}
	override void SetNames(){
		N_NAME = StringTable.Localize("$FIRE_ZOMBIE_NAME");
		N_DEATHNAME = StringTable.Localize("$FIRE_ZOMBIE_DEATHNAME");
		N_BURNDEATHNAME = StringTable.Localize("$FIRE_ZOMBIE_BURNDEATHNAME");
		N_GIBDEATHNAME = StringTable.Localize("$FIRE_ZOMBIE_GIBDEATHNAME");
		N_HEADSHOTED = StringTable.Localize("$FIRE_ZOMBIE_HEADSHOTED");

	}
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		self.giveInventory("Burner", 1);
		SetNames();
	}
	Override void Tick(){
		Super.Tick();
		takeInventory("HeadShotController", 1);

	}

	States
	{
		SetSprite://for DistanceSpawned
			BZOD E 1 A_SetTranslation("DarkGray");
			Goto Super::FakeIdle;

	}
}
//===========================================================================
//
// Blood gamme Axe Zombie
//
//===========================================================================
class Z_AxeZombie : CHmonster
{
	int fx_fireplace_offset;
	float fx_fireplace_scale;
	bool faked;
	int BaseHealth;
	int fakeIdle;
	int fakeIdleDelay;
	int RealHeight;
	int RealRadius;
	int DefSpeed;
	float rescale;
	int rushChance;//chance to rush on player
	int stupid;
	int stupidDelay;
	int stupidChance;
	bool fireRebirth;


	Default
	{
		Health 150;

		PainChance "Pitchfork", 10;
		PainChance "FakeRat", 255;
		PainChance "RatByte", 0;
		PainChance "KineticPlayerDamage", 255;
		PainChance 70;

		radius 16;
		height 56;
		DeathHeight 8;
		Speed 10;
		Mass 200;
		Monster;
		scale 0.45;
		+FLOORCLIP;
		+DropOff;
		//+DONTOVERLAP;
		+RANDOMIZE;
		obituary "$ZOMBIE_OBITUARY";
		BloodType "RedBlood";
		SeeSound "zombie/sight";
		AttackSound "zombie/melee";
		PainSound "zombie/pain";
		DeathSound "zombie/death";
		ActiveSound "zombie/active";

		DamageFactor "fire", 1.0;
		DamageFactor "Blast", 2.0;
		DamageFactor "Poison", 0.2;





		//$alias zombie/fake
		//$alias zombie/groundup
	}
	bool CheckFallDown(){
		float c = 100.0-float(health)/float(BaseHealth)*100.0;
		if(c>25){ c = 25;}
		if(frandom(0, 100)<c){ return true;}
		return false;
	}
	bool CheckStumble(){
		if(random(0, 1000)<3){ return true;}
		return false;
	}
	bool fakeIdleCheck(){
		fakeIdle++;
		if(fakeIdle>fakeIdleDelay){
			fakeIdle = 0;
			return true;
		}
		return false;
	}
	override int getRenderDistance(){ return RenderDistance;}

	override void SetNames(){
		N_NAME = StringTable.Localize("$ZOMBIE_NAME");
		N_DEATHNAME = StringTable.Localize("$ZOMBIE_DEATHNAME");
		N_BURNDEATHNAME = StringTable.Localize("$ZOMBIE_BURNDEATHNAME");
		N_GIBDEATHNAME = StringTable.Localize("$ZOMBIE_GIBDEATHNAME");
		N_HEADSHOTED = StringTable.Localize("$ZOMBIE_HEADSHOTED");

	}

	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		SetNames();
		self.giveInventory("HeadShotController", 1);
		self.giveInventory("FootShotController", 1);

		self.giveInventory("QuickKillReady", 1);
		self.giveInventory("SubordinatedReady", 1);
		self.giveInventory("MonsterShellXDeathController", 1);

		self.setTag(N_NAME);

		RenderDistance = Cvar.FindCvar("monsters_render_radius").GetInt() ;
		fx_fireplace_offset = 8;
		fx_fireplace_scale = 0.2;
		fakeIdleDelay = random(35*10, 35*5);
		rushChance = 5;
		stupidChance = 1;
		stupidDelay = 1200;

		switch (random(1, 3)){
			case 1:
				A_SetTranslation("GrayZombie");
				break;
			case 2:
				A_SetTranslation("GreenZombie");
				break;
			case 3:
				A_SetTranslation("RedZombie");
				A_setHealth(health*1.5);
				break;
			case 0:
				break;
		}
		//A_SetTranslation("RedZombie");

		rescale = frandom(0.8, 1.1);//factor to resize hole monster
		DefSpeed = speed/rescale;
		Speed = DefSpeed;

		a_setSize(radius*rescale, height*rescale);
		A_setHealth(health*rescale);
		A_SetScale(scale.x*rescale);

		RealHeight = height;
		RealRadius = radius;
		BaseHealth = health;
//self.GiveInventory("HumanXDeathGibs", 1);
	}
	Override void Tick(){
		Super.Tick();
		if(self.checkInventory("Burner", 1)){
			a_setSpeed(random(DefSpeed, DefSpeed/2));
		} else {
			a_setSpeed(DefSpeed);
		}

		/*if(fireRebirth){
			takeInventory("HeadShotController", 1);
			self.giveInventory("Burner", 1);
		}*/
		if(waterlevel>1){self.takeInventory("Burner", 1);}
	}

	States
	{	SetSprite://for DistanceSpawned
		Spawn:

			BZOM I 1 NODELAY {
					giveInventory("HeadShotController", 1);
					giveInventory("FootShotController", 1);
				}
			BZOM I 10 A_Look;
			Loop;

		See:
			TNT1 A 0 a_jumpIf(noLegs, "NoLegs");
			TNT1 A 0 {
				giveInventory("HeadShotController", 1);
				giveInventory("FootShotController", 1);
				giveInventory("QuickKillReady", 1);
				giveInventory("SubordinatedReady", 1);
			}
			BZOM ABCDEF 4 Fast {
				stupid = 0;
				FastChase();
				if(rescale<=1.0 && random(0, 100)<rushChance){ A_Recoil(-6);}
			}
			TNT1 A 0 A_Jumpif((random(0, 100)<stupidChance), "Stupid");
			TNT1 A 0 A_Jumpif(CheckStumble(), "FakeSilent");

			Loop;

		NoLegs:
			TNT1 A 0 A_Jumpif(health<=0, "DeathNoLegs");
			TNT1 A 0 {
				takeInventory("HeadShotController", 1);
				takeInventory("FootShotController", 1);
				A_SetSpeed(default.speed / 3);
				a_playSound("gore/splashy");
				A_SpawnItemEx("BloodTrail", random(-16, 16), random(-16, 16), random(0, 16 ), frandom(-3.0, 3.0), frandom(-3.0, 3.0), frandom(4.0, 6.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);

			}
			R066 JKL 6 A_chase();
			Loop;

		Stupid:
			TNT1 A 0 { giveInventory("HeadShotController", 1); giveInventory("FootShotController", 1); }
			BZOM ABCDEF 4 {
				A_ClearTarget();
				A_Wander();
				stupid++;
			}
			TNT1 A 0 A_Jumpif(stupid>random(0, stupidDelay), "See");
			Loop;
		Melee:
			TNT1 A 0 a_jumpIf(noLegs, "NoLegsMelee");
			TNT1 A 0 { giveInventory("HeadShotController", 1); giveInventory("FootShotController", 1); }
			BZOM J 5 A_FaceTarget;
			BZOM J 0 A_Recoil(-2);
			BZOM KL 6;
			BZOM J 0 A_Recoil(-1);
			BZOM M 4 A_CustomBulletAttack(10, 10, 1, random(8,16)*rescale, "Z_Axe_Puff", 48);//A_CustomMeleeAttack(random(8,16)*rescale, "", "", "Normal", 1);
			BZOM NO 7;
			TNT1 A 0 A_ClearTarget;
			goto See;

		NoLegsMelee:
			TNT1 A 0 {
				takeInventory("FootShotController", 1);
				Speed = default.speed / 3;
			}
			R066 JKL 6;
			TNT1 A 0 {
				a_playSound("animal/smallBite");
				A_CustomMeleeAttack(random(3,6),"","none");
			}
			goto See;
		Pain:
			TNT1 A 0 A_Jumpif(health<=0, "Death");
			TNT1 A 0 a_jumpIf(noLegs, "PainNoLegs");
			TNT1 A 0 { giveInventory("HeadShotController", 1); giveInventory("FootShotController", 1); A_setSize(RealRadius, RealHeight); }
			TNT1 A 0 A_JumpIf(faked,"FakeUp");//chance to fakup ignore if it is no faked
			TNT1 A 0 A_Jumpif(CheckFallDown(), "Fake");
			BZOM H 8 A_Pain;
			goto See;

		PainNoLegs:
			TNT1 A 0 { takeInventory("FootShotController", 1); }
			R066 B 8;
			Goto See;

		Pain.Fire:
			TNT1 A 0 A_Jumpif(health<=0, "Death");
			TNT1 A 0 { giveInventory("HeadShotController", 1); giveInventory("FootShotController", 1); A_setSize(RealRadius, RealHeight); }
			TNT1 A 0 A_JumpIf(faked,"FakeUp");
			TNT1 A 0 {A_Pain(); if(LastDamage>5){ self.giveInventory("Burner", 1); } }
			TNT1 A 0 a_jumpIf(noLegs, "PainNoLegs");
			BZOM H 8;
			goto See;

		BlowLegs:
			TNT1 A 0 A_Jumpif(health<=0, "DeathNoLegs");
			TNT1 A 0 {
				takeInventory("HeadShotController", 1); takeInventory("FootShotController", 1);
				setZ(pos.z+(height/2));
				giveInventory("ManyBlood", 1);
				a_setSize(radius, height/3);
			}
			R066 B 8;
			R067 ABC 4;
			R067 C 70;
			R067 CBA 6;
			goto See;
		Fake:
			TNT1 A 0 { takeInventory("HeadShotController", 1); takeInventory("FootShotController", 1); }
			BZOD A 0
			{
				faked = true;
				A_Scream();
				//A_UNSetSolid();
				A_setSize(RealRadius, 16);
				if(GetFloorTerrain().IsLiquid){
					self.takeInventory("Burner15sec", 1);
				}
			}
			BZOD AB 4;
			TNT1 A 0  a_playSound("human/BodyFall");
			BZOD CDE 4;
			BZOD E 1;
			GOTO FakeIdle;
		FakeSilent:
			TNT1 A 0 { takeInventory("HeadShotController", 1); takeInventory("FootShotController", 1); }
			BZOD A 0
			{
				faked = true;
				//A_UNSetSolid();
				A_setSize(RealRadius, 16);
				if(GetFloorTerrain().IsLiquid){
					self.takeInventory("Burner15sec", 1);
				}
			}
			BZOD AB 4;
			TNT1 A 0  a_playSound("human/BodyFall");
			BZOD CDE 4;
			BZOD E 15 ;
			GOTO FakeIdle;

		FakeIdle:
			TNT1 A 0 {
				takeInventory("HeadShotController", 1);
				takeInventory("FootShotController", 1);
				faked = true;
				//A_UNSetSolid();
				A_setSize(RealRadius, 16);
				//A_ChangeFlag("NOBLOCKMAP", 0);
				//
			}
			BZOD E 280;
		FakeWaitForUp:
			TNT1 A 0 { takeInventory("HeadShotController", 1); takeInventory("FootShotController", 1); }
			BZOD E 1 A_JumpIfCloser(256,"FakeUpMeele");
			TNT1 A 0 A_JumpIf(fakeIdleCheck(),"FakeUp");
			TNT1 A 0 A_setSize(RealRadius, 16);
			LOOP;
		FakeUp:
			TNT1 A 0 { takeInventory("HeadShotController", 1); takeInventory("FootShotController", 1);}
			BZOD E 15;
			TNT1 A 0
			{
				A_SetSolid();
				A_setSize(RealRadius, RealHeight);
				A_PlaySound("zombie/fake");
				faked = false;
			}
			BZOD EDCBA 4;
			goto Spawn;
		FakeUpMeele:
			TNT1 A 0 { takeInventory("HeadShotController", 1); takeInventory("FootShotController", 1); }
			TNT1 A 0
			{
				A_SetSolid();
				A_FaceTarget();
				A_setSize(RealRadius, RealHeight);
				A_PlaySound("zombie/fake");
				faked = false;
			}
			BZOD EDCBA 3 A_Recoil(-3);
			goto Melee;


		Death:
			TNT1 A 0 a_jumpIf(noLegs, "DeathNoLegs");
			TNT1 A 0 A_Jumpif(health<=0, 2);
			TNT1 A 0 A_JumpIf(faked,"Death.FakeIdle");
			TNT1 A 0 A_Scream;
			BZOD A 8;
			BZOD B 8;
			TNT1 A 0  a_playSound("human/BodyFall");
			BZOD C 4;
			BZOD D 4 { /*A_Fall(); A_SetSolid();*/ }
			TNT1 A 0 {
				self.setTag(N_DEATHNAME);
				actor BC = self.spawn("BodyBlowTarget", self.pos);BC.Master = self;//this is works
				if(!random(0,1)){
					self.giveInventory("Bleeder", 1);
				}

			}
			BZOD E 1 ;
			"####" "#" 0 A_SpawnItemEx("HeartHealth", 0, 0, 0, frandom(-2.0, 2.0), frandom(-2.0, 2.0), frandom(4.0, 8.0), 0,SXF_NOCHECKPOSITION, 128 );
			Goto Corpse;

		DeathNoLegs:
			TNT1 A 0  { a_playSound("human/BodyFall"); A_Scream(); }
			R067 ABC 8;
			TNT1 A 0 {
				self.setTag(N_DEATHNAME);
				actor BC = self.spawn("BodyBlowTarget", self.pos);BC.Master = self;//this is works
				if(!random(0,1)){
					self.giveInventory("Bleeder", 1);
				}

			}
			R067 C 1 ;
			"####" "#" 0 A_SpawnItemEx("HeartHealth", 0, 0, 0, frandom(-2.0, 2.0), frandom(-2.0, 2.0), frandom(4.0, 8.0), 0,SXF_NOCHECKPOSITION, 128 );
			Goto Corpse;

		Death.FakeIdle:
			TNT1 A 0 { self.setTag(N_DEATHNAME); actor BC = self.spawn("BodyBlowTarget", self.pos);BC.Master = self; }
			BZOD E 1;
			Goto Corpse;

		Death.fire:
			TNT1 A 0 A_setSize(radius, RealHeight);
			TNT1 A 0 a_JumpIf(GetFloorTerrain().IsLiquid , "Death");/////////////// zombie just die in vater
			TNT1 A 0 {
				 if(!GetFloorTerrain().IsLiquid){
					self.giveInventory("Burner15sec", 1);
				 }
				 A_SetSize(8, 24);
			 }
			TNT1 A 0 A_PlaySound("zombie/fireDeath");
			TNT1 A 0 a_JumpIf( (random(1, 3)==1 && !GetFloorTerrain().IsLiquid ), "Death.ToReborn");/////////////// fire zombie rebirth
			TNT1 A 0 a_jumpIf(noLegs, 8);
			FGUY G 16 bright;
			FGUY H 16 bright;
			FGUY I 16 bright /*A_Fall*/;
			FGUY JKLMN  8 bright;
			TNT1 A 0  { a_playSound("human/BodyFall"); BDSM(); }
			FGUY OPQRS 8 bright;
			TNT1 A 0 { self.setTag(N_BURNDEATHNAME); }
			FGUT T 1;
			Goto Corpse;

		Death.ToReborn:
			TNT1 A 0 { takeInventory("HeadShotController", 1); takeInventory("FootShotController", 1); }
			BZOD A 0
			{
				//fireRebirth = true;
				faked = true;
				A_Scream();
				A_SetTranslation("DarkGray");
				A_UNSetSolid();
				self.giveInventory("Burner", 1);
			}
			BZOD AB 4 /*A_setSize(RealRadius, 16)*/;
			TNT1 A 0  a_playSound("human/BodyFall");
			BZOD CDE 4;
			BZOD E 1 ;
			TNT1 A 0 {
				z_fire_AxeZombie FZOM = z_fire_AxeZombie(self.spawn("z_fire_AxeZombie", self.pos));

				if(FZOM){
						FZOM.rescale = rescale;//factor to resize hole monster
						FZOM.DefSpeed = DefSpeed;
						FZOM.Speed = FZOM.DefSpeed;
						FZOM.RealHeight = RealHeight;
						FZOM.RealRadius = RealRadius;
						FZOM.BaseHealth = BaseHealth*2;
						FZOM.health = FZOM.BaseHealth;

						//FZOM.SetStateLabel("FakeIdle");
						//FZOM.faked = true;
						//FZOM.setState(FZOM.FindState("FakeIdle", 0));

						self.destroy();
				}
			}


		Death.Headshot:
			TNT1 A 0 {
					/*A_Fall();
					A_SetSolid();*/
					A_SpawnItemEx("ZombieHeadFLy",0, 0, height, frandom(1.0, 2.0), frandom(-4.0, 4.0), frandom(8.0, 16.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
					for(int i = 0; i<random(5, 7); i++){
						A_SpawnItemEx("BloodTrail", random(-2, 2), random(-2, 2), random(-2, 2), frandom(1.0, 2.0), frandom(-4.0, 4.0), frandom(1.0, 8.0), 0,SXF_NOCHECKPOSITION);
					}
				}
			BZOD LMN 8 a_playSound("gore/BloodSplash");
			TNT1 A 0  a_playSound("human/BodyFall");
			BZOD OPQRS 8;
			TNT1 A 0 {
				self.setTag(N_HEADSHOTED);
				actor BC = self.spawn("BodyBlowTarget", self.pos);BC.Master = self;
			}
			BZOD S 1;
			"####" "#" 0 A_SpawnItemEx("HeartHealth", 0, 0, 0, frandom(-2.0, 2.0), frandom(-2.0, 2.0), frandom(4.0, 8.0), 0,SXF_NOCHECKPOSITION, 64 );
			Goto Corpse;
		Xdeath.Shells:
		XDeath:
			BZOX A 0 {
				A_XScream();
				a_UnsetSolid();
				self.GiveInventory("HumanXDeathGibs", 1);
				GiveInventory("GibDeathMark", 1);
				/* A_Fall(); A_SetSolid();*/
				}
			BZOX A 5;
			BZOX B 5;
			BZOX C 5;
			BZOX DEFG 5;
			TNT1 A 0 { self.setTag(N_GIBDEATHNAME);}
			BZOX H 1;
			Goto Corpse;
		Corpse:
			"####" "#" 1 {
				/*CorpseMarker Marker = CorpseMarker(self.spawn("CorpseMarker", self.pos));
				Marker.GiveInventory("ActorOptions", 1);
				Marker.Master = self;
				SetNames(Marker);*/
				//a_UnsetSolid();
				bTHRUACTORS = 1;
				self.takeInventory("QuickKillReady", 1);
				self.takeInventory("SubordinatedReady", 1);
				A_setSize(16, 8);

			}
			"####" "#" -1;
			Stop;
		Raise:
			BZOD E 8;
			BZOD D 8;
			BZOD C 8;
			BZOD B 8;
			BZOD A 8;
			Goto See;
	}
}


class ZombieHead : DistanceSpawned
{

	Default
	{
	  health 30;
	  radius 8;
	  height 16;
	  Speed 10;
	  scale 0.5;
	  mass 60;


		+CANPASS;
		+CANPUSHWALLS;
		+CANUSEWALLS;
		+ACTIVATEMCROSS;

	  +SHOOTABLE;
	  +RANDOMIZE;
	  +PUSHABLE;

		painchance 255;
	}
	override int getRenderDistance(){ return RenderDistance;}
	Override void PostBeginPlay()
	{

		Super.PostBeginPlay();
		self.setTag(StringTable.Localize("$ZOMBIEHEAD_NAME"));

		RenderDistance = Cvar.FindCvar("monsters_render_radius").GetInt() ;
	}
	States
	{	SetSprite://for DistanceSpawned
		Spawn:
			ZHED ARARR 15{
				//if ( Random(1,101) > 50){frame = random(0,1);}
				A_LookEx(LOF_NOSOUNDCHECK);
			 }
			goto See;
		See:
			//TNT1 A 0 {if ( Random(0,100) < 70){frame = random(0,1);}}
			//ZHED A 1  A_JumpIf(checkInventory("itemInHands", 1), "Spawn");
			ZHED A 1;
			ZHED A 1 A_JumpIf(checkInventory("Unhandable", 1), "Spawn");
			ZHED A 1  A_JumpIf(checkInventory("itemInHands", 1), "InHands");
			ZHED A 1 A_JumpIfCloser(32,"Kick");
			goto spawn;

		InHands:
			ZHED ARARR 15 A_JumpIf(!checkInventory("itemInHands", 1), "Spawn");
			Loop;
		Pain:
			ZHED ABCDEFGHIJKLMNOP 2;
			goto spawn;
		Pain.Fire:
			ZHED A 1 {
				self.giveInventory("Burner", 1);

			}
			goto spawn;
		Kick:

			ZHED A 1 {
					A_FaceTarget();
					A_SetAngle(angle+180);
					A_PlaySound("zombie/cickHead");
					PlayerInfo players = players[consoleplayer];
					A_SpawnItemEX("ZombieHeadFLy",0,0,6,10+3*players.mo.Vel.Z,0,fRandom(3,7));//jump to kick far
				}
			Goto Death.Silent;
		Death.Silent:
			TNT1 A 1;
			stop;
		Death.Fire:
			ZHED Q -1 { a_changeFlag("SHOOTABLE", 1); A_setSize(8, 16); self.setTag(StringTable.Localize("$ZOMBIEHEAD_BURNED"));}
			Stop;
		Death:
			TNT1 A 1 {
					a_playSound("gore/BloodSplash");
					for(int i = 0; i<5; i++){
						A_SpawnItemEx("BloodTrail", random(-2, 2), random(-2, 2), random(-2, 2), frandom(1.0, 2.0), frandom(-4.0, 4.0), frandom(1.0, 8.0), 0,SXF_NOCHECKPOSITION);
					}
			}

			Stop;
	}
}

class ZombieHeadFLy : ZombieHead
{
	Default
	{
	  PROJECTILE;
	  Damage 0;
	  -NOGRAVITY;
	  +DOOMBOUNCE;
	  +BOUNCEONACTORS;
	  -CANBOUNCEWATER;
	  +FLOORCLIP;
	  +USEBOUNCESTATE;

	}
	States
	{	SetSprite://for DistanceSpawned
		Spawn:
			ZHED ABCDEFGHIJKLMNOP 2 ;
			Loop;
		Pain.Fire:
			ZHED A 1 {self.giveInventory("Burner", 1);}
			goto spawn;
		Bounce.Floor:
			TNT1 A 0 a_playsound("gore/hit");
			ZHED A 1 A_SpawnItemEx("BloodTrail", random(-2, 2), random(-2, 2), random(-2, 2), frandom(-4.0, 4.0), frandom(-4.0, 4.0), frandom(1.0, 8.0), 0,SXF_NOCHECKPOSITION);
			Goto Spawn;
		Death:
			TNT1 A 1 {
				A_SpawnItemEx("ZombieHead", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
			}
			Stop;
	}
}