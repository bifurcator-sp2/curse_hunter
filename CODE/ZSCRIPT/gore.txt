Class GrayBlood : Actor
{
	Default
	{
		Translation "0:255=#[96,96,96]";
		+Nointeraction;
		+clientsideonly;
	}
	States
	{
		Spawn:
			BLUD A 4;
			BLUD B 4;
			BLUD D 4;
			BLUD E 4;
			Stop;
	}
}


Class GreenBlood : actor
{
	Default
	{
		SCALE 0.7;
		+clientsideonly;
		+Nointeraction;

		//Translation "0:255=#[96,96,96]";
		//translation "0:255=#[0,150,30]";
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

	}
	States
	{
		Spawn:
			TNT1 A 0 a_jump(255, "MoreBleed");
			TNT1 A 0 a_jump(255, "Bleed");
			TNT1 A 0 a_jump(255, "NoBleed");
		NoBleed:
			TNT1 A 1 {
				a_playsound("gore/hit", CHAN_BODY, 0.5);
				A_FaceTarget();
				A_SpawnItemEx("BloodSplashOnBodyGreen", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION);
			}
			TNT1 A 15;
			Stop;
		Bleed:
			TNT1 A 1 {
				a_playsound("gore/hit", CHAN_BODY, 0.5);
				A_FaceTarget();
				A_SpawnItemEx("BloodSplashOnBodyGreen", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("BloodTrailGreen", random(-2, 2), random(-2, 2), random(-2, 2), frandom(2.0, 4.0), frandom(-4.0, 4.0), frandom(1.0, 8.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
				giveInventory("ScreenBloodSplashMakerGreen", 1);
			}
			TNT1 A 15;
			Stop;
		MoreBleed:
			TNT1 A 1{
				A_FaceTarget();
				A_SpawnItemEx("BloodSplashOnBodyGreen", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION);
				for(int i = 0; i<random(1, 5); i++){
					A_SpawnItemEx("BloodTrailGreen", random(-2, 2), random(-2, 2), random(-2, 2), frandom(1.0, 2.0), frandom(-4.0, 4.0), frandom(1.0, 8.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
				}
				giveInventory("ScreenBloodSplashMakerMediumGreen", 1);
			}
			TNT1 A 5 a_playsound("gore/hit", CHAN_BODY, 0.5);
			Stop;
	}
}

Class RedBlood : actor
{
	Default
	{
		SCALE 0.7;
		+clientsideonly;
		+Nointeraction;

		//Translation "0:255=#[96,96,96]";
		//translation "0:255=#[0,150,30]";
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

	}
	States
	{
		Spawn:
			TNT1 A 0 a_jump(255, "MoreBleed");
			TNT1 A 0 a_jump(255, "Bleed");
			TNT1 A 0 a_jump(255, "NoBleed");
		NoBleed:
			TNT1 A 1 {
				A_FaceTarget();
				A_SpawnItemEx("BloodSplashOnBody", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
			}
			TNT1 A 15;
			Stop;
		Bleed:
			TNT1 A 1 {
				A_FaceTarget();
				A_SpawnItemEx("BloodSplashOnBody", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
				A_SpawnItemEx("BloodTrail", random(-2, 2), random(-2, 2), random(-2, 2), frandom(2.0, 4.0), frandom(-4.0, 4.0), frandom(1.0, 8.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
				giveInventory("ScreenBloodSplashMaker", 1);
			}
			TNT1 A 15;
			Stop;
		MoreBleed:
			TNT1 A 1{
				A_FaceTarget();
				A_SpawnItemEx("BloodSplashOnBody", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
				for(int i = 0; i<random(1, 5); i++){
					A_SpawnItemEx("BloodTrail", random(-2, 2), random(-2, 2), random(-2, 2), frandom(1.0, 2.0), frandom(-4.0, 4.0), frandom(1.0, 8.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
				}
				giveInventory("ScreenBloodSplashMakerMedium", 1);
			}
			Stop;
	}
}

class ScreenBloodSplashMaker : Undroppable
{
	int Power;
	int MaxDist;
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Power = 1;
		MaxDist = 128;

		if(Owner){
			float Dist = Owner.Distance3d(players[consolePlayer].mo);
			if(Dist<=MaxDist){
				int Prob = Dist/MaxDist*100;
				for(int i=0; i<Power; i++){
					if(random(0, 100)<=Prob){
						players[consolePlayer].mo.GiveInventory(String.Format("ScreenBloodSplash_%i", random(0, 10) ) ,1);
					}
				}
			}
			Owner.takeInventory(getClassName(), 1);

		}
	}
}

class PlaerBloodSplashMarker : Undroppable
{
	default
	{
		Inventory.MaxAmount 10;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if(Owner){
			for(int i=0; i<Owner.CountInv(getClassName()); i++){
				Owner.GiveInventory(String.Format("ScreenBloodSplash_%i", random(0, 10) ) ,1);
			}
			Owner.takeInventory(getClassName(), Owner.CountInv(getClassName()));
		}
	}
}


class ScreenBloodSplashMakerGreen : Undroppable
{
	int Power;
	int MaxDist;
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Power = 1;
		MaxDist = 128;

		if(Owner){
			float Dist = Owner.Distance3d(players[consolePlayer].mo);
			if(Dist<=MaxDist){
				int Prob = Dist/MaxDist*100;
				for(int i=0; i<Power; i++){
					if(random(0, 100)<=Prob){
						players[consolePlayer].mo.GiveInventory(String.Format("ScreenBloodSplashGreen_%i", random(0, 10) ) ,1);
					}
				}
			}
			Owner.takeInventory(getClassName(), 1);

		}
	}
}

class ScreenBloodSplashMakerMedium : ScreenBloodSplashMaker
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Power = 2;
	}
}
class ScreenBloodSplashMakerMediumGreen : ScreenBloodSplashMakerGreen
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Power = 2;
	}
}
class ScreenBloodSplashMakerBig : ScreenBloodSplashMaker
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Power = 3;
	}
}
class ScreenBloodSplashMakerBigGreen : ScreenBloodSplashMakerGreen
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Power = 3;
	}
}
class ScreenBloodSplash : Undroppable
{

	string Tex;
	float X;
	float Y;
	float FadeSpeed;
	property Tex: Tex;
	int place;

	Default
	{
		alpha  0.7;
	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		place = random(1, 4);
		switch(place){
			case 1:
				X = random(0, 50);
				Y = random(0, 768);
				break;
			case 2:
				X = random(0, 1024);
				Y = random(0, 45);
				break;
			case 3:
				X = random(1024-50, 1024);
				Y = random(0, 768);
				break;
			case 4:
				X = random(0, 1024);
				Y = random(768-45, 768);
				break;
		}

		FadeSpeed = frandom(0.01, 0.03);
	}

	override void DoEffect(){
		a_fadeOut(FadeSpeed);
		//alpha-=FadeSpeed;
		if(Owner && alpha<=0){
			Owner.takeInventory(getClassName(), 1);
		}
	}
}
class ScreenBloodSplash_0 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "SCRBLD0"; } }
class ScreenBloodSplash_1 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "SCRBLD1"; } }
class ScreenBloodSplash_2 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "SCRBLD2"; } }
class ScreenBloodSplash_3 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "SCRBLD3"; } }
class ScreenBloodSplash_4 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "SCRBLD4"; } }
class ScreenBloodSplash_5 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "SCRBLD5"; } }
class ScreenBloodSplash_6 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "SCRBLD6"; } }
class ScreenBloodSplash_7 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "SCRBLD7"; } }
class ScreenBloodSplash_8 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "SCRBLD8"; } }
class ScreenBloodSplash_9 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "SCRBLD9"; } }
class ScreenBloodSplash_10 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "SCRBLD10"; } }

class ScreenBloodSplashGreen_0 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "GSCRBLD0"; } }
class ScreenBloodSplashGreen_1 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "GSCRBLD1"; } }
class ScreenBloodSplashGreen_2 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "GSCRBLD2"; } }
class ScreenBloodSplashGreen_3 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "GSCRBLD3"; } }
class ScreenBloodSplashGreen_4 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "GSCRBLD4"; } }
class ScreenBloodSplashGreen_5 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "GSCRBLD5"; } }
class ScreenBloodSplashGreen_6 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "GSCRBLD6"; } }
class ScreenBloodSplashGreen_7 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "GSCRBLD7"; } }
class ScreenBloodSplashGreen_8 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "GSCRBLD8"; } }
class ScreenBloodSplashGreen_9 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "GSCRBLD9"; } }
class ScreenBloodSplashGreen_10 : ScreenBloodSplash {  Default{ ScreenBloodSplash.Tex  "GSCRBLD10"; } }




class BloodSplashOnBody : actor
{
	Default
	{
		scale 0.5;
		+Nointeraction;
		+clientsideonly;

	}
	States
	{
		Spawn:
			BLUD AD 4;
			BLUD A 0 nodelay a_playsound("gore/hit", CHAN_BODY, 1.0);
			BLUD CDE 4;
			Stop;
	}
}

class BloodSplashOnBodyGreen : BloodSplashOnBody
{
	Default
	{
		translation "0:255=112:127";
	}
}


Class BloodTrail : actor
{
	int counter;
	Default
	{
		+Missile;
		+THRUACTORS;
		+NOBLOCKMAP;
		+clientsideonly;
		+GHOST;
		-SOLID;
		Decal "BldDec";
		+FORCEDECAL;
		+DONTSPLASH
		//+NOINTERACTION;
		//Translation "0:255=#[96,96,96]";

	}
//
	States
	{
		Spawn:
			BLD2 A 1  nodelay A_SpawnItemEx("BloodTrailPoint", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
			TNT1 A 0 {
				counter++;
				if(counter>10){ self.bMissile = 1;}
				a_fadeOut(0.05, FTF_REMOVE);
				//A_SprayDecal("BldDec", 32);
			}
			TNT1 A 0 A_JumpIf(WaterLevel > 0, "Death");
			Loop;
		Death:
			TNT1 A 0 { A_SprayDecal("BldDec", 32); }
			BLD2 F 4;
			BLD2 G 4{
				if(pos.z<floorz+16){
					A_SpawnItemEx("BloodPoolGround", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
				}
				a_playSound("gore/spillDown"); //Play sound here
			}
			BLD2 H 4;
			BLD2 I 4;
			Stop;

	}


}
class BloodTrailGreen : BloodTrail
{
	Default
	{
		translation "0:255=112:127";
	}
}

class BloodTrailPoint : actor
{
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		-SOLID;
		+clientsideonly;
		+DONTSPLASH;
		scale 0.5;
		//translation "0:255=#[0,150,30]";
//Translation "0:255=#[96,96,96]";
	}
	override void tick(){
		super.tick();
		a_fadeOut(0.05, FTF_REMOVE);
	}
	States
	{
		Spawn:
			BLD2 A 1;
			BLD2 B 1;
			BLD2 C 1;
			BLD2 D 1;
			BLD2 E 1;
			Loop;

	}
}
class GreenBloodTrailPoint : BloodTrailPoint
{
	Default
	{
		translation "0:255=112:127";
	}
}

class BloodPoolGround : DistanceSpawned
{
	Default
	{
		+NOBLOCKMAP;
		+clientsideonly;
		+FLATSPRITE;
		+GHOST;
		-SOLID;
		scale 0.2;
		RenderStyle "Translucent";
		alpha 0.6;
	}
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		RenderDistance = Cvar.FindCvar("blood_render_radius").GetInt() ;
		A_SetAngle(random(0, 360));
		SetZ(floorz);
		//a_setScale(random(0.2, 0.5));
	}
	States
	{
		SetSprite://for DistanceSpawned
			TNT1 A 0 A_Jump (256, 1, 2, 3, 4);
			SPLD A 0 A_jump(256, "Spawn");
			SPLD B 0 A_jump(256, "Spawn");
			SPLD C 0 A_jump(256, "Spawn");
			SPLD D 0 A_jump(256, "Spawn");
		Spawn:
			"####" "#" -1;
			Stop;

	}
}


/*
class BodyBlowController : CustomInventory
{
	int H;
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.AUTOACTIVATE;

	}
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if(Owner){ Owner.a_setHealth(50);}

	}
	override void DoEffect(){
		if(Owner){
			if(Owner.health<H){
				a_logint(Owner.health);
			}
			H = Owner.health;
			//
		}
	}

	states
	{
		Spawn:
			TNT1 A 1;
			stop;
		Use:
			TNT1 A 1;
			Loop;
	}
}
*/

class HumanXDeathGibs : Undroppable
{
	int Amount;
	Override void PostBeginPlay()
	{
		Amount = random(5, 15);
		Super.PostBeginPlay();
		Owner.A_SpawnItemEx("BloodCloud", 0, 0, 64, 0, 0, 0, 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		giveInventory("ScreenBloodSplashMakerBig", 1);
	}
	override void DoEffect(){
		if(Amount){
			Amount--;
			Owner.A_SpawnItemEx("HumanGib", random(-16, 16), random(-16, 16), random(16, 32 ), frandom(-4.0, 4.0), frandom(-4.0, 4.0), frandom(4.0, 8.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
			Owner.A_SpawnItemEx("BloodTrail", random(-16, 16), random(-16, 16), random(16, 32 ), frandom(-6.0, 6.0), frandom(-6.0, 6.0), frandom(8.0, 12.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
			Owner.A_SpawnItemEx("GibSound");
		}

	}

}


class HumanDeathGibs : Undroppable
{
	int Amount;
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Amount = random(5, 15);
		giveInventory("ScreenBloodSplashMakerBig", 1);
		Owner.A_SpawnItemEx("GibSound");
	}
	override void DoEffect(){
		if(Amount){
			Amount--;
			Owner.A_SpawnItemEx("HumanGib", random(-16, 16), random(-16, 16), random(0, 16 ), frandom(-2.0, 2.0), frandom(-2.0, 2.0), frandom(2.0, 4.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
			Owner.A_SpawnItemEx("BloodTrail", random(-16, 16), random(-16, 16), random(0, 16 ), frandom(-3.0, 3.0), frandom(-3.0, 3.0), frandom(4.0, 6.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);

		}
	}

}

class UniDeathGibs : Undroppable
{
	int Amount;
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Amount = random(7, 15);
		giveInventory("ScreenBloodSplashMakerBig", 1);
		Owner.A_SpawnItemEx("GibSound");
		Owner.A_SpawnItemEx("BloodCloudMedium", 0, 0, 32, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
	}
	override void DoEffect(){
		if(Amount){
			Amount--;
			Owner.A_SpawnItemEx("UniGib", random(-16, 16), random(-16, 16), random(0, 16 ), frandom(-2.0, 2.0), frandom(-2.0, 2.0), frandom(2.0, 4.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
			Owner.A_SpawnItemEx("BloodTrail", random(-16, 16), random(-16, 16), random(0, 16 ), frandom(-3.0, 3.0), frandom(-3.0, 3.0), frandom(4.0, 6.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
		}
	}

}

class UniDeathGibsGreen : Undroppable
{
	int Amount;
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Amount = random(7, 15);
		Owner.giveInventory("ScreenBloodSplashMakerBigGreen", 1);
		Owner.A_SpawnItemEx("GibSound");
		//Owner.A_SpawnItemEx("BloodCloudMedium", 0, 0, 32, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
	}
	override void DoEffect(){
		if(Amount){
			Amount--;
			Owner.A_SpawnItemEx("UniGibGreen", random(-16, 16), random(-16, 16), random(0, 16 ), frandom(-2.0, 2.0), frandom(-2.0, 2.0), frandom(2.0, 4.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
			Owner.A_SpawnItemEx("BloodTrailGreen", random(-16, 16), random(-16, 16), random(0, 16 ), frandom(-3.0, 3.0), frandom(-3.0, 3.0), frandom(4.0, 6.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		}
	}

}

class UniDeathGibsGreenSpawner : actor
{
	default{
		translation "0:255=#[0,205,40]";
	}

	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		self.GiveInventory("UniDeathGibs", 1);
	}
	states {
		spawn:
			TNT1 A 20;
		stop;
	}
}





class ManyBlood : Undroppable
{
	int Amount;
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Amount = random(5, 15);
		giveInventory("ScreenBloodSplashMakerBig", 1);
		Owner.A_SpawnItemEx("BloodCloudMedium", 0, 0, 64, 0, 0, 0, 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
		Owner.A_SpawnItemEx("ManyBloodSound");
	}
	override void DoEffect(){
		if(Amount){
			Amount--;
			Owner.A_SpawnItemEx("BloodTrail", random(-16, 16), random(-16, 16), random(0, 16 ), frandom(-3.0, 3.0), frandom(-3.0, 3.0), frandom(4.0, 6.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);

		}
	}

}
class BloodCloudMedium : BloodCloud
{
	default
	{
		scale 1.0;
	}
}

class BloodCloud : actor
{
	default
	{
		+DONTTHRUST;
		+GHOST;
		gravity 0.02;
		RENDERSTYLE "translucent";
		scale 2.0;
	}
	states
	{
		Spawn:
			BLCL A 1 A_fadeOut(0.01, FTF_REMOVE);
			loop;
	}

}
class ManyBloodSound : Actor
{
	default{
		+NOINTERACTION;
		+NOGRAVITY;
		+DONTTHRUST;
	}
	states {
		spawn:
			TNT1 A 5;
			TNT1 A 0 a_playSound("gore/BloodSplash");
			TNT1 A 35;
			TNT1 A 0 destroy();
			Stop;
	}
}
class GibSound : Actor
{
	default{
		+NOINTERACTION;
		+NOGRAVITY;
		+DONTTHRUST;
	}
	states {
		spawn:
			TNT1 A 5;
			TNT1 A 0 a_playSound("misc/gibbed");
			TNT1 A 35;
			TNT1 A 0 destroy();
			Stop;
	}
}
class HumanGib : Gib
{
	states
	{
		SetSprite://for DistanceSpawned
			TNT1 A 0 A_Jump (256, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22);
			BLVR B 0 A_jump(256, "Spawn");
			BLVR C 0 A_jump(256, "Spawn");
			BLVR D 0 A_jump(256, "Spawn");
			BLVR E 0 A_jump(256, "Spawn");
			GUT1 A 0 A_jump(256, "Spawn");
			GUT2 A 0 A_jump(256, "Spawn");
			GUT2 B 0 A_jump(256, "Spawn");
			GUT2 C 0 A_jump(256, "Spawn");
			GUT2 D 0 A_jump(256, "Spawn");
			GUT2 E 0 A_jump(256, "Spawn");
			HND1 A 0 A_jump(256, "Spawn");
			HND2 A 0 A_jump(256, "Spawn");
			BEYE A 0 A_jump(256, "Spawn");
			BRIN A 0 A_jump(256, "Spawn");
			CRS1 B 0 A_jump(256, "Spawn");
			GIB1 B 0 A_jump(256, "Spawn");
			GIB4 A 0 A_jump(256, "Spawn");
			XDT5 I 0 A_jump(256, "Spawn");
			XME5 C 0 A_jump(256, "Spawn");
			XME8 A 0 A_jump(256, "Spawn");
			XME8 B 0 A_jump(256, "Spawn");
			XSTO E 0 A_jump(256, "Spawn");

	}
}
class UniGib : Gib
{
	states
	{
		SetSprite://for DistanceSpawned
			TNT1 A 0 A_Jump (256, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18);
			BLVR B 0 A_jump(256, "Spawn");
			BLVR C 0 A_jump(256, "Spawn");
			BLVR D 0 A_jump(256, "Spawn");
			BLVR E 0 A_jump(256, "Spawn");
			GUT1 A 0 A_jump(256, "Spawn");
			GUT2 A 0 A_jump(256, "Spawn");
			GUT2 B 0 A_jump(256, "Spawn");
			GUT2 C 0 A_jump(256, "Spawn");
			GUT2 D 0 A_jump(256, "Spawn");
			GUT2 E 0 A_jump(256, "Spawn");
			BRIN A 0 A_jump(256, "Spawn");
			CRS1 B 0 A_jump(256, "Spawn");
			GIB1 B 0 A_jump(256, "Spawn");
			GIB4 A 0 A_jump(256, "Spawn");
			XME5 C 0 A_jump(256, "Spawn");
			XME8 A 0 A_jump(256, "Spawn");
			XME8 B 0 A_jump(256, "Spawn");
			XSTO E 0 A_jump(256, "Spawn");

	}

}
class UniGibGreen : UniGib
{
	Default
	{
		translation "0:255=#[0,205,40]";
	}
}
class Gib : DistanceSpawned
{
	int RollSpeed;
	Default
	{
		+clientsideonly;
		Decal "BldDec";
		+FORCEDECAL;
		+RollSprite;
		+DONTTHRUST;
		GRAVITY 0.5;
		scale 0.5;
		+FLOORCLIP;

	}
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		RenderDistance = Cvar.FindCvar("blood_render_radius").GetInt() ;
		A_SetRoll(random(0, 360));
		a_setScale(frandom(0.5, 0.7));
		RollSpeed = random(-24, 24);
	}
	override void Tick(){
		super.tick();


	}

	states
	{
		Spawn:
			"####" "#" 1 {
				A_setRoll(roll+RollSpeed);
				A_SpawnItemEx("BloodTrailPoint", 0, 0, 0, 0, 0, 0, 0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
				if(pos.z == floorZ){
				 SetStateLabel("Death");
				}
				if(WaterLevel > 0){ SetStateLabel("Death"); }
			}
			Loop;
		/*Bounce.Floor:
			"####" "#" 0 { if(!random(0, 2)){a_playsound("gore/hit");}}
			"####" "#" 1 A_SpawnItemEx("BloodTrail", random(-2, 2), random(-2, 2), random(-2, 2), frandom(-4.0, 4.0), frandom(-4.0, 4.0), frandom(1.0, 8.0), 0,SXF_NOCHECKPOSITION);
			Goto Spawn;*/

		Death:
			"####" "#" 0 {
				A_setRoll(0.0);
				A_SpawnItemEx("BloodTrail", random(-2, 2), random(-2, 2), random(2, 4), frandom(-4.0, 4.0), frandom(-4.0, 4.0), frandom(4.0, 8.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
			}
			"####" "#" -1;
			Stop;

	}

}



Class GargXDeathGibs : HumanXDeathGibs
{

	override void DoEffect(){
		if(Owner){
			Owner.A_SpawnItemEx("GargHead", random(-16, 16), random(-16, 16), random(0, 16 ), frandom(-2.0, 2.0), frandom(-2.0, 2.0), frandom(6.0, 8.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
			Owner.A_SpawnItemEx("GargWing", random(-16, 16), random(-16, 16), random(0, 16 ), frandom(-3.0, 3.0), frandom(-3.0, 3.0), frandom(6.0, 8.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
			Owner.A_SpawnItemEx("GargWing", random(-16, 16), random(-16, 16), random(0, 16 ), frandom(-3.0, 3.0), frandom(-3.0, 3.0), frandom(6.0, 8.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
			for(int i = 0; i<random(5, 10); i++){
				Owner.A_SpawnItemEx("UniGib", random(-16, 16), random(-16, 16), random(0, 16 ), frandom(-3.0, 3.0), frandom(-3.0, 3.0), frandom(6.0, 8.0), 0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERTRANSLATION);
			}
			Owner.takeInventory("GargXDeathGibs", 1);
		}
	}
}

class GargHead : Gib
{
	states
	{
		SetSprite://for DistanceSpawned
			GARH A 0;
			Goto spawn;
	}

}
class GargWing : Gib
{
	states
	{
		SetSprite://for DistanceSpawned
			GWNG A 0;
			Goto spawn;
		Death:
			GWNG D 0;
			Goto Super::Death;
	}

}
